name of the course: ROS2 For Beginners (ROS Foxy, Humble - 2024)

provided by: Edouard Renard

language agnostic -> means you can program in different programming languages python c++

install terminator:
$ sudo apt install terminator

source env:
check ros distros in $ cd /opt/ros/
source the distro
$ cd foxy
$ source setup.bash

if you get 
"ROS_DISTRO was set to 'noetic' before. Please make sure that the environment does not mix paths from different distributions."
you might try
unset /opt/ros/noetic/setup.bash

and check
$ env |grep ROS
or
$ printenv | grep -i ROS

source ros2 again
$ cd /opt/ros/foxy/
$ source setup.bash
------------- source 

normally you need to source it every time in new terminal
to avoid it,
$ gedit ~/.bashrc
go to the end and paste: "source /opt/ros/foxy/setup.bash"

------------- communication & rqt
ROS 2 ROS_DOMAIN_ID -> ROS 2 nodes on the same domain can freely discover and send messages to each other, while ROS 2 nodes on different domains cannot. All ROS 2 nodes use domain ID 0 by default. To avoid interference between different groups of computers running ROS 2 on the same network, a different domain ID should be set for each group.

ROS_LOCALHOST_ONLY -> allows you to limit ROS 2 communication to localhost only. This means your ROS 2 system, and its topics, services, and actions will not be visible to other computers on the local network. where multiple robots may publish to the same topic causing strange behaviors. 

-------------
now we instal colcon common exntensions
$ sudo apt install python3-colcon-common-extensions

-------------
create a work space
$ mkdir ros2_ws_tutorials

build it
$ cd ros2_ws_tutorials
$ mkdir src
$ colcon build

to use whatever you created in this workspace, you should source it
$ cd install
$ source local_setup.bash
or
$ source setup.bash
difference is the setup.bash is for global

------------- Packages in ROS2
A package is an organizational unit for your ROS 2 code. If you want to be able to install your code or share it with others, then youâ€™ll need it organized in a package. With packages, you can release your ROS 2 work and allow others to build and use it easily.
Package creation in ROS 2 uses ament as its build system and colcon as its build tool. You can create a package using either CMake or Python.

create ros2 package python
$ cd ros2_ws_tutorials/src
$ ros2 pkg create my_py_pkg --build-type ament_python --dependencies rclpy

to compile package, go to the ros ws, use colcon
$ cd ..
$ colcon build

if you want to build only a single package,
$ colcon build --packages-select my_py_pkg

create ros2 package c++
$ ros2 pkg create my_cpp_pkg --build-type ament_cmake --dependencies rclcpp

to build it, go to the ros ws, use colcon
$ cd ..
$ colcon build

if you get catkin_pkg error,
File "/opt/ros/foxy/share/ament_cmake_core/cmake/core/package_xml_2_cmake.py", line 21, in <module>
    from catkin_pkg.package import parse_package_string
ModuleNotFoundError: No module named 'catkin_pkg'
solution: $ pip3 install catkin_pkg

if you want to build only a single package,
$ colcon build --packages-select my_cpp_pkg




------------- Nodes in ROS2
Each node in ROS should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder. 

Communicate with each other through topics, services and parameters.

Benefits:
- reduce code complexity
- fault tolerance 
	if one node crashes, it will not make other nodes crash
- language agnostic, 
	one node in python, another one in c++
	both nodes can communicate without any problem
	
- two nodes cannot have the same name! all nodes must be unique

to create first node, go to the package,
$ cd ~/ros2_ws_tutorials/src/my_py_pkg/my_py_pkg
$ touch my_first_node.py

after you create your node, make it executable
$ chmod +x my_first_node.py

then launch it
$ ./my_first_node.py

this way of runing the node is not efficient and scalable
you can install the python file in "setup.py"
setup.cfg: where you will install the file 
setup.py: specify a name for the executable 
edit the setup.py file
then build the package

$ cd ros2_ws_tutorials
$ colcon build --packages-select my_py_pkg

now the node is installed, check install folder now
$ cd install/my_py_pkg/lib/my_py_pkg
why lib file? because the path is given in setup.cfg
you may get error, if you get, source the workspace
$ source ~/.baschrc

in practice, both of these ways to run python node is not used,
you can use ros2 command line tools
after you compiled the package and installed the node,
go another terminal, source the workspace,
$ source .bashrc
then run the node
$ ros2 run my_py_pkg py_node

CPP Node

if the cpp library is not defined in VS Code, you need to press CTRL + Shift + P
then type C/C++ Edit configuration JSON
add the path of libraries of ros foxy there, which is 
/opt/ros/foxy/include/**

you need to compile it after editting
then install it 
to do that, use CMakeLists.txt
this is the part of installation for cpp 
then build the cpp package
$ colcon build --packages-select my_cpp_pkg
then go to where it is installed,
$ cd /home/onur/ros2_ws_tutorials/install/my_cpp_pkg/lib/my_cpp_pkg
and run the node
$ ./cpp_node

to make it easy, go to new terminal, source it,
$ source .bashrc
$ ros2 run my_cpp_pkg cpp_node 

to print all the nodes running,
$ ros2 node list
to get info about a node, subscribers publishers service clients and action servers,
$ ros2 node info /node_name

how to launch the same node with different config?
$ ros2 run my_py_pkg py_node --ros-args --remap __node:=py_node_1
where py_node_1 is the new name
for cpp,
$ ros2 run my_cpp_pkg cpp_node --ros-args -r __node:=cpp_node_1
where cpp_node_1 is the new name

------------- Colcon
to build your workspace,
$ cd ros2_ws/
$ colcon build
or you can select a pacakge
$ colcon build --packages-select my_py_pkg

every time you modify your node, you need to build it again,
unless you use,
$ colcon build --packages-select my_py_pkg --symlink-install
this means instead of launching rosrun, it will create a link to your file,
useful for debugging and development 
you use this once, then you can edit your node, then use ros2 run directly.
Only for python, not for cpp.

but make sure your file is executable!
$ cd ros2_ws/src/my_py_pkg/my_py_pkg
$ chmod +x my_first_node.py

------------- Rqt 

start rqt,
$ rqt

only graph with nodes (node graph),
$ rqt_graph

you can check plugins/services/service caller
and you can pick the service, edit expression, and call it
below, you will see the response

you can also check the node graph to see nodes and topics


------------- Turtlesim
get a turtle,
$ ros2 run turtlesim turtlesim_node
you can also rename this node,
$ ros2 run turtlesim turtlesim_node --ros-args -r __node:=my_turtle

to control from keyboard,
$ ros2 run turtlesim turtle_teleop_key

clean traces of the turtle from terminal,
$ ros2 service call /clear std_srvs/srv/Empty 

spawn a new turtle,
$ ros2 service call /spawn turtlesim/srv/Spawn "{x: 2.0, y: 3.0 , theta: 11.0, name: 'my_turtle42'}"

first check the type of the service,
$ ros2 service type /spawn
it returns "turtlesim/srv/Spawn"
use it in the following,
check the interface, request, what you need to give to call it,
$ ros2 interface show turtlesim/srv/Spawn

to reset number_counter application,
$ ros2 service call /reset_counter example_interfaces/srv/SetBool "{data: True}"

------------- Topics

Each node, which is publishing or subscribing to the topics is totally independent.
A node can contain multiple publishers, but also subscribers
A topic is a named bus over which nodes exhange messages
Unidirectional data stream (publisher/subscriber)
Publishers and subscribers are anonymous
A topic has a message type, publisher and subscriber to the topic must use the same message type associated with the topic
Python, C++, inside ROS nodes
A node can have many publisgers/subscribers for many topics

to create python publisher,
go to the same path with the node,
$ cd ros2_ws/src/my_py_pkg/my_py_pkg,
$ touch robot_news_station.py
$ chmod +x robot_news_station.py


to check msj types you can have a look at,
ros2 interface show example_interfaces/msg/String
it will return the type, string
and the field, data
"from example_interfaces.msg import String"
dont forget to add dependency in package.xml

to list topics,
$ ros2 topic list

to listen a topic,
$ ros2 topic echo /robot_news


to create python subscriber,
$ cd ros2_ws/src/my_py_pkg/my_py_pkg
$ touch phone.py
$ chmod +x phone.py

to create cpp publisher,
$ cd ros2_ws/src/my_cpp_pkg/src/
$ touch robot_news_station.cpp
start editing your code
if you use any library, dont forget to include in dependencies, package.xml
also in CMakeLists.txt, you need to include dependencies and make it executable here
"add_executable", "ament_target_dependencies", "install"
ament target dependencies is for defining the libraries you use there
in install, you need the executable name there
then, build it,
$ colcon build --packages-select my_cpp_pkg

to create cpp subscriber,
$ cd ros2_ws/src/my_cpp_pkg/src/
$ touch phone.cpp


to learn about the topic msg type, #of subscribers and publishers,
$ ros2 topic info /robot_news

to use echo, listen the topic,
$ ros2 topic echo /robot_news

to publish from terminal, 10 hz, msg type, message
$ ros2 topic pub -r 10 /robot_news example_interfaces/msg/String "{data: 'hello from terminal'}"

to learn actual msg definition, you can use the Type in topic info and paste here
$ ros2 interface show example_interfaces/msg/String
Now you now what you need to send for this topic

to learn frequency of topic,
$ ros2 topic hz /robot_news
to learn band width of topic,
$ ros2 topic bw /robot_news

how to rename the topic name, remap both node name and topic name,
$ ros2 run my_py_pkg robot_news_station --ros-args -r __node:=my_station -r robot_news:=my_news
it is also possible to remap subscribed node at the subscriber side,
onur@koeken:~$ ros2 run my_py_pkg phone --ros-args -r robot_news:=my_news


------------- Services
Topics are used for data streams, and Services for a client/server interaction.

example use case 1
Client - Weather service server (cloud)
think of http:// URL as ros2 service name 
first send request from client to server, msg location
server process request and send response, msg weather

you can have multiple clients for this service but only one service and corresponding server
client and server nodes are not aware of each other, they see ros2 service interface

example use case 2
controlling LED panel node, it can power on/off
create a ros2 service, set led
another node, battery node, check if it is low, client
if battery is low, it will send request of led_number:6 and state:on
so service will request to LED panel node, it will turn on the light number 6,
then send response to Set led service, and it will return Success:true to Battery node client

if battery is high, it will send request of led_number:6 and state:off
so service will request to LED panel node, it will turn off the light number 6
then send response to Set led service, and it will return Success:true to Battery node client

* a ros2 service is a client/server system
* it can be synchronous or asynchronous
* one msg type for Request, one msg type for Response
* can be written in python, c++, ... inside ROS nodes
* a service server can only exist once, but can have many clients


to create Python Service Server,

to check one example,
$ ros2 interface show example_interfaces/srv/AddTwoInts 
response is below "---", and request is above "---"

to check services,
$ ros2 service list

to call a service,
service name, msg type, request
$ ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts "{a: 48, b: 52}"

to create C++ Service Server,
$ cd Projects/ROS2/ros2_foxy_tutorial_ws/src/my_cpp_pkg_/src/
$ touch server_name.cpp

test the service from terminal,
$ ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts "{a: 5, b: 48}"


to remap a service at runtime,
$ ros2 run my_cpp_pkg_ add_two_ints_server --ros-args -r add_two_ints:=new_service_name
and corresponding client,
$ ros2 run my_py_pkg add_two_ints_client --ros-args -r add_two_ints:=new_service_name

--- Debug msg and srv

what data do I need to send?
$ ros2 interface show message_name
$ ros2 interface show example_interfaces/msg/String
$ ros2 interface show my_robot_interfaces/srv/ComputeRectangleArea

ros2 interfaces, messages, services
$ ros2 interface list

interfaces of a package,
which messages do I have in a particular interface?
$ ros2 interface package sensor_msgs

from a publisher node, you can find the name of the topic, name of the interface
$ ros2 node list
$ ros2 node info /the_publisher_node
check "Publishers" section

$ ros2 topic list
$ ros2 topic info /the_topic_name
$ ros2 interface show the_message_type
and you get what you need to send

lets say you have a server, run it first,
$ ros2 run my_py_pkg add_two_ints_server
then in another terminal,
$ ros2 node list
$ ros2 node info /add_two_ints_server
check "Service Servers", you see the interface
$ ros2 service list
$ ros2 service type /add_two_ints
you get the name of the interface,
$ ros2 interface show the_interface_name
$ ros2 interface show example_interfaces/srv/AddTwoInts
you get what you need to send/receive

topic is a communication layer,
interface is what you send and get


------------- Interfaces

ROS2 interfaces are the messages and services you use with your topics and services.

Topic defined by,
- topic name (ex: /number_count)
- msg definition (ex: example_interfaces/msg/Int64)

Service defined by,
- topic name (ex: /reset_number_count)
- srv definition (ex: example_interfaces/srv/SetBool), request msg and response msg

you can install more interfaces here:
github-> ro2/common_interfaces
there are several msgs,
you can simply install one of them by,
$ sudo apt install ros-foxy-geometry-msgs 
to check if it is installed,
$ dpkg -l | grep ros-foxy-geometry-msgs
or try to access the files,
$ ls /opt/ros/foxy/share/geometry_msgs

for example, check sensor_msgs/msg/JointState.msg
useful to send position, velocity, effort for each joint of the robot
header comes from std_msgs/Header, its not a primitive data type, another message 

another example, geometry_msgs/msg/Twist.msg
used in turtlesim to send velocity command
Vector3 linear, Vector3 angular 
this is not a primitive data type, already existing message
if you dont see name of package, it is from this package
go to geometry_msgs/msg/Vector3.msg
it contains 3 primitive data types,
float64 x, float64 y, float64 z

for the srv,
an example, geometry_msgs/srv/SetCameraInfo.srv
we have "---" here, it is always the case for .srv file
first request, then "---", then response
here request is another message,
sensor_msgs/CameraInfo camera_info
you need to check that message to see what to request

you cant include .srv in .srv, only messages

another example, sensor_msgs/msg/CameraInfo.msg

overall,
- use msg primitive types to create a message definition
- you can create a message definition using other message definitions


---

create a new package to create a custom ros2 message
$ cd ros_ws/src
$ ros2 pkg create my_robot_interfaces 
we dont need rclcpp, rclpy because there will be no code in this package
$ cd my_robot_interfaces

if you dont specify a build type, it will use cpp package as default
remove include and src
$ rm -rf include/
$ rm -rf src/
$ mkdir msg

if you check package.xml,
build type ament_cmake,
add depend lines,
edit CMakeLists.txt, dependencies, find_package()
check the file for details

create a message,
use Uppercase for each word, dont use dash or dont include msg in the msg name,
$ touch HardwareStatus.msg
then just add primitive data types

then compile,
$ cd ros2_ws
$ colcon build --packages-select my_robot_interfaces

in ros2 foxy, you can find the installed msg here:
/ros2_foxy_tutorial_ws/install/my_robot_interfaces/lib/python3.8/site-packages/my_robot_interfaces/msg 
in ros2 humble, its in ...my_robot_interfaces/local/lib/python3.8/dist-packages/...
to find the .hpp file,
/ros2_foxy_tutorial_ws/install/my_robot_interfaces/include/my_robot_interfaces/msg/

to check if ros2 custom interface is created successfully 
$ ros2 interface show my_robot_interfaces/msg/HardwareStatus 

to add new msg, you just create in the msg folder,
then add it in CMakeLists.txt, "rosidl_generate_interfaces(${PROJECT_NAME} "msg/NewName.msg")". and compile, you can use the new msg.

--- use custom msg in a py node 

create a new publisher node,
from my_robot_interfaces.msg import HardwareStatus

if VScode gives an error, that it cannot find this message,
you need to add extra path in python auto complete, settings.json 

add dependency in package.xml of my_py_pkg
the rest is the same with a normal publisher node 

--- use custom msg in a cpp node

similar things with a normal publisher,
just include the new message,
#include "my_robot_interfaces/msg/hardware_status.hpp"

if you get error in VSCode, you can include the path of new package of messages
in .vscode/c_cpp_properties.json, check "includePath"

dont forget to add dependency, find_package(), in CMakeLists.txt

--- custom service
$ cd ros2_ws/src/my_robot_interfaces
$ mkdir srv
$ cd srv
$ touch ComputeRectangleArea.srv

now edit in VSC
use primitive data types, float64
first request
then "---"
then response

to build it, in package.xml of my_robot_interfaces should contain the 3 lines to build and execute
in CMakeLists.txt, check find_package lines, and include in rosidl_generate_interfaces, add new line just like msg,
"srv/ComputeRectangleArea.srv"
dont forget that for each .msg and .srv, you need to add a new line here in CMakeLists.txt

then just build it

to check,
$ ros2 interface show my_robot_interfaces/srv/ComputeRectangleArea 


------------- General Info - ROS2

imagine you have several ros packages: motion planning pkg, camera pkg, hardware control pkg
in the camera pkg, you have: camera driver node, image processing node, image enhancement node, etc.
each node can be launched independently
then nodes will communicate after launching


------------- Remove pkgs
rm -rf src/package_name
rm -rf build/ install/ log/
colcon build

































